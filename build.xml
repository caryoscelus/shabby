<!-- 
template Ant build file for all projects that should go into the distribution. 
Fill out the properties at the beginning of the project definition.

The following things have to be set from the outside:

property name="jar" value="jar-name-without-suffix" -> the name of the resulting jar file
property name="distDir" value="dist-directory" -> the output directory for the resulting jar
path id="classpath" -> the filesets defining the classpath needed to compile the project
zipfileset id="jarfiles" -> the jar files to be merged with the project's classes
-->
<project name="hello" default="all" basedir=".">
    <property name="jar" value="gg"/>
    <property name="distDir" value="dist"/>
    <property name="docDir" value="doc"/>

    <!-- default values -->
    <path id="src">
    <pathelement location="src"/>
    </path>
    
    <property name="jni" value="jni"/>
    <property name="target" value="target" />
    <property name="libs" value="libs" />
<!--     <property name="lib" value="lib" /> -->
    
    <path id="classpath">
        <pathelement location="${libs}/gdx.jar"/>
        <pathelement location="${libs}/gdx-natives.jar"/>
        <pathelement location="${libs}/gdx-backend-lwjgl.jar"/>
        <pathelement location="${libs}/gdx-backend-lwjgl-natives.jar"/>
        <pathelement location="${libs}/clojure.jar"/>
    </path>

    <property name="main-class" value="shabby.ShabbyDesktop"/>

    <zipfileset id="jarfiles" dir="." excludes="**"/>

    <!-- clean output directories, create libs directory -->    
    <target name="clean">        
        <mkdir dir="${libs}" />
        <delete dir="${target}" />
    </target>

    <!-- init task, creates all necessary directories -->
    <target name="init" depends="clean">
        <mkdir dir="${target}" />
        <mkdir dir="${target}/java" />
        <!-- need to copy the internal font to target if compiling the gdx core :/ -->
        <copy failonerror="false" tofile="${target}/java/com/badlogic/gdx/utils/arial-15.png" file="src/com/badlogic/gdx/utils/arial-15.png" />
        <copy failonerror="false" tofile="${target}/java/com/badlogic/gdx/utils/arial-15.fnt" file="src/com/badlogic/gdx/utils/arial-15.fnt" />
        <!-- need to copy jni headers for gdx-jnigen -->
        <copy failonerror="false" todir="${target}/java">
            <fileset dir="src">
                <include name="**/*.h"/>
                <include name="**/*.template"/>
            </fileset>
        </copy>
        <copy failonerror="false" todir="${target}/java">
            <fileset dir="src">
                <include name="**/*.gwt.xml"/>
            </fileset>
        </copy>
    </target>

    <!-- compiles the java code -->
    <target name="compile" depends="init">
        <javac debug="on" encoding="utf-8" source="1.7" target="1.7" destdir="${target}/java" includeantruntime="false">
            <src>
                <path refid="src"/>
            </src>
            <classpath>
                <path refid="classpath"/>
                <fileset file="${libs}/*.jar">
                    <exclude name="*-natives.jar"/>
                </fileset>
            </classpath>
            <exclude name="**/gwt/emu/java/lang/System.java"/>
        </javac>
    </target>


    <!-- compile native code if available -->
    <target name="check-natives">
        <condition property="natives-present">
            <and>
                <available file="${jni}/build.xml"/>
                <istrue value="${build-natives}"/>
            </and>
        </condition>
    </target>
    
    <target name="compile-natives" depends="init, check-natives" if="natives-present">
        <mkdir dir="${libs}/android32" />
        <mkdir dir="${libs}/armeabi" />
        <mkdir dir="${libs}/armeabi-v7a" />
        <mkdir dir="${libs}/linux32" />
        <mkdir dir="${libs}/linux64" />
        <mkdir dir="${libs}/macosx32" />
        <mkdir dir="${libs}/windows32" />
        <mkdir dir="${libs}/windows64" />
        <mkdir dir="${libs}/ios32"/>
        <echo message="compiling natives code"/>
        <ant antfile="build.xml" target="clean" dir="${jni}"/>
        <ant antfile="build.xml" target="all" dir="${jni}"/>
        <!-- copy shared libs for android -->
        <copy failonerror="false" todir="${distDir}/armeabi">
            <fileset dir="${libs}/armeabi">
                <include name="**/*.so"/>
            </fileset>
        </copy>
        <copy failonerror="false" todir="${distDir}/armeabi-v7a">
            <fileset dir="${libs}/armeabi-v7a">
                <include name="**/*.so"/>
            </fileset>
        </copy>
    </target>
    
    <!-- create source and class jar -->
    <target name="jar" depends="compile,compile-natives">
        <!-- source jar -->
        <mkdir dir="${distDir}/sources" />
        
        <!-- FIXME doesn't work for bullet, as this only takes the src/ folder -->
        <jar destfile="${distDir}/sources/${jar}-sources.jar" basedir="src">
            <manifest>
                <attribute name="Main-Class" value="${main-class}"/>
            </manifest>
        </jar>
        
        <!-- copy shared libs for desktop -->
        <copy failonerror="false" todir="${distDir}">
            <fileset dir="${libs}">
                <include name="**/*-natives.jar"/>
                <exclude name="**/test-natives.jar"/>
            </fileset>
        </copy>
        
        <!-- copy shared libs for android -->
        <copy failonerror="false" todir="${distDir}/armeabi">
            <fileset dir="${libs}/armeabi">
                <include name="**/*.so"/>
            </fileset>
        </copy>
        <copy failonerror="false" todir="${distDir}/armeabi-v7a">
            <fileset dir="${libs}/armeabi-v7a">
                <include name="**/*.so"/>
            </fileset>
        </copy>
        
        <!-- class jar -->
        <jar destfile="${distDir}/${jar}.jar">
            <fileset dir="${target}/java"/>
            <!-- merge dependencies found in libs/ folder, exclude native, debug and android/gwt jars -->
            <zipgroupfileset file="${libs}/*.jar">
<!--                 <exclude name="*-natives.jar"/> -->
                <exclude name="*-debug.jar"/>
                <exclude name="android-*.jar"/>
                <exclude name="gwt*.jar"/>
            </zipgroupfileset>
            <!-- merge dependencies specified in parent build.xml -->
            <zipfileset refid="jarfiles"/>
            <manifest>
                <attribute name="Main-Class" value="${main-class}"/>
            </manifest>
        </jar>
    </target>
    
    <target name="bundle" depends="compile">
        <jar destfile="${distDir}/bundle.jar">
            <fileset dir="${target}/java"/>
            <zipgroupfileset file="${libs}/*.jar">
<!--                 <exclude name="*-natives.jar"/> -->
                <exclude name="*-debug.jar"/>
                <exclude name="android-*.jar"/>
                <exclude name="gwt*.jar"/>
            </zipgroupfileset>
            <fileset dir="." includes="data/" defaultexcludes="no"/>
            <fileset dir="." includes="GPL3,README.md" defaultexcludes="no"/>
            <manifest>
                <attribute name="Main-Class" value="${main-class}"/>
            </manifest>
        </jar>
    </target>
    
    <target name="justrun">
        <java fork="true" classname="${main-class}">
            <classpath>
                <path refid="classpath"/>
                <path location="target/java"/>
            </classpath>
        </java>
    </target>
    
    <target name="runfast" depends="compile,justrun">
        
    </target>
    
    <target name="run" depends="jar">
        <java fork="true" jar="${distDir}/${jar}.jar"/>
    </target>
    
    <target name="runbundle" depends="bundle">
        <java fork="true" jar="${distDir}/bundle.jar"/>
    </target>
    
    <target name="doc" depends="init" description="generate documentation">
        <javadoc sourcepathref="src" destdir="${docDir}"/>
    </target>
    
    <target name="all" depends="jar">
    </target>
</project>
